{"version":3,"file":"user_profile.min.js","sources":["../src/user_profile.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controls the message preference page.\n *\n * @module     local_booking/administration\n * @author     Mustafa Hajjar (mustafahajjar@gmail.com)\n * @copyright  BAVirtual.co.uk Â© 2021\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'jquery',\n    'core/str',\n    'core/notification',\n    'local_booking/repository',\n    'local_booking/selectors'\n],\nfunction(\n    $,\n    Str,\n    Notification,\n    Repository,\n    Selectors\n) {\n\n    /**\n     * Set the endorsed message.\n     *\n     * @param  {string} courseId    The course id for suspension.\n     * @param  {string} userId      The user id to be suspended.\n     * @param  {string} endorse     Endorse true/false.\n     * @param  {object} root        The root element.\n     * @method setEndorsement\n     */\n     const setEndorsement = function(courseId, userId, endorse, root) {\n        // Get endorsement information (endorser, date, and message) from template\n        let userProfile = root.find(Selectors.userprofilewrapper),\n        endorsername = userProfile.data('endorsername'),\n        endorser = userProfile.data('endorser'),\n        endorsedate = new Date(),\n        endorsedon = endorsedate.toDateString(),\n        endorsedatets = Math.round(endorsedate.getTime() / 1000),\n        endorsestr = endorse ? 'endorsementmgs' : 'skilltestendorse';\n\n        // Process endorsement message\n        let endorsemsgPromise = Str.get_string(endorsestr, 'local_booking', {endorser: endorsername, endorsedate: endorsedon});\n        endorsemsgPromise.then(function(message) {\n            // Set endorsement message\n            $('#endorsement-label').html(message);\n            // Show/hide recommendation letter link\n            if (endorse) {\n                $('#endorsement-letter').removeClass('hidden');\n            } else {\n                $('#endorsement-letter').addClass('hidden');\n            }\n\n            return message;\n        })\n        .fail(Notification.exception);\n\n        // Persist endorsement in user preferences\n        processUserPreference('endorse', endorse, courseId, userId, 'endorse');\n        processUserPreference('endorser', endorse ? endorser : '', courseId, userId, 'endorse');\n        processUserPreference('endorsedate', endorse ? endorsedatets : '', courseId, userId, 'endorse');\n        processUserPreference('endorsenotify', endorse, courseId, userId, 'endorse');\n    };\n\n    /**\n     * Process the user setting preference depending on the passed\n     * preference and value pairs.\n     *\n     * @param  {string} preference  The  preferencekey of the setting.\n     * @param  {string} value       The value data.\n     * @param  {string} courseId    The course id for suspension.\n     * @param  {string} userId      The user id to be suspended.\n     * @param  {string} element     The element to handl GUI.\n     * @method processUserPreference\n     * @return {bool}\n     */\n     const processUserPreference = function(preference, value, courseId, userId, element) {\n        // eslint-disable-next-line promise/valid-params\n        return Repository.updateUserPreferences(preference, value, courseId, userId)\n        .then()\n        .always(function() {\n            Notification.fetchNotifications();\n        })\n        .fail(function(ex) {\n            Notification.exception(ex);\n            // Handle toggle failure\n            $('#' + element).prop('checked', !$('#' + element).prop('checked'));\n            return;\n        });\n    };\n\n    /**\n     * Process the user suspension status.\n     *\n     * @param  {bool}   suspend     Suspend true/false.\n     * @param  {string} courseId    The course id for suspension.\n     * @param  {string} userId      The user id to be suspended.\n     * @method processSuspendedStatus\n     * @return {bool}\n     */\n     const processSuspendedStatus = function(suspend, courseId, userId) {\n        // eslint-disable-next-line promise/valid-params\n        return Repository.updateSuspendedStatus(suspend, courseId, userId)\n        .then()\n        .always(function() {\n            Notification.fetchNotifications();\n        })\n        .fail(function(ex) {\n            Notification.exception(ex);\n            // Handle toggle failure\n            $('#suspended').prop('checked', !$('#suspended').prop('checked'));\n            return;\n        });\n    };\n\n    /**\n     * Process the user group membership status on-hold and keep active.\n     *\n     * @param  {string} key         The key of the setting.\n     * @param  {string} value      Join or leave true/false.\n     * @param  {string} courseId    The course id for suspension.\n     * @param  {string} userId      The user id to be suspended.\n     * @param  {object} root        The root element.\n     * @method processGroup\n     * @return {bool}\n     */\n     const processGroup = function(key, value, courseId, userId, root) {\n        // Get the group name from the template\n        let userProfile = root.find(Selectors.userprofilewrapper),\n        group = userProfile.data(key + 'group');\n\n        // eslint-disable-next-line promise/valid-params\n        return Repository.updateGroup(group, value, courseId, userId)\n        .then()\n        .always(function() {\n            Notification.fetchNotifications();\n        })\n        .fail(function(ex) {\n            Notification.exception(ex);\n            // Handle toggle failure\n            $('#' + key).prop('checked', !$('#' + key).prop('checked'));\n            return;\n        });\n    };\n\n    /**\n     * Create all of the event listeners for the message preferences page.\n     *\n     * @param  {string} courseId    The course id for suspension.\n     * @param  {string} userId      The user id to be suspended.\n     * @param  {string} key         The key of the setting.\n     * @param  {string} value       Setting value.\n     * @param  {object} root        The root element.\n     * @method processSetting\n     */\n     const processSetting = function(courseId, userId, key, value, root) {\n\n        // Show progressing icon\n        startLoading($('#' + key + '-region'));\n\n        // Process the different toggle actions\n        switch (key) {\n            case 'endorse':\n                // Process student endorsement and handle UI\n                setEndorsement(courseId, userId, value, root);\n                break;\n            case 'xcoursebookings':\n                // Process availability override in user preferences and handle UI, site level courseid=1\n                processUserPreference(key, value, 1, userId, key);\n                break;\n            case 'availabilityoverride':\n                // Process availability override in user preferences and handle UI\n                processUserPreference(key, value, courseId, userId, key);\n                break;\n            case 'suspend':\n                // Toggle enrolment status suspension on/off and handle UI\n                processSuspendedStatus(value, courseId, userId);\n                break;\n            case 'onhold':\n            case 'keepactive':\n                // Process keep active in user preferences and handle UI\n                processGroup(key, value, courseId, userId, root);\n                break;\n        }\n\n        // Stop showing progressing icon\n        stopLoading($('#' + key + '-region'));\n    };\n\n    /**\n     * Create all of the event listeners for the message preferences page.\n     *\n     * @param  {string} courseId    The course id for suspension.\n     * @param  {string} userId      The user id to be suspended.\n     * @param  {object} root        The root element.\n     * @method processSetting\n     * @return {bool}\n     */\n     const updateComment = function(courseId, userId, root) {\n\n        // Show progressing icon\n        startLoading(root);\n        const comment = $('#comment').val();\n\n        // Save the comment\n        return Repository.updateProfileComment(courseId, userId, comment)\n        .then(function(response) {\n            // Add success status element if necessary\n            let result = response.result;\n            // eslint-disable-next-line promise/no-nesting\n            Str.get_string((result ? 'commentsaved' : 'commentnotsaved'), 'local_booking').then(function(string) {\n                // Show the status for a little bit\n                $('#status').addClass('comment-status-' + (result ? 'success' : 'error'));\n                $('#status').removeClass('comment-status-' + (!result ? 'success' : 'error'));\n                $('#status').text(string).slideDown(1000).delay(2000).slideUp(1000);\n                return;\n            })\n            .fail(Notification.exception);\n            return;\n        })\n        .always(function() {\n            Notification.fetchNotifications();\n            // Stop showing progressing icon\n            stopLoading(root);\n        })\n        .fail(Notification.exception);\n    };\n\n    /**\n     * Create all of the event listeners for the message preferences page.\n     *\n     * @param  {object} root    The root element.\n     * @method registerEventListeners\n     */\n    const registerEventListeners = function(root) {\n\n        var userProfile = root.find(Selectors.userprofilewrapper),\n        courseId = userProfile.data('courseid'),\n        userId = userProfile.data('userid');\n\n        // Handle endorsement toggle clicks\n        $('#endorse').click(function() {\n            processSetting(courseId, userId, 'endorse', this.checked, root);\n        });\n\n        // Handle suspension toggle clicks\n        $('#suspended').click(function() {\n            processSetting(courseId, userId, 'suspend', this.checked);\n        });\n\n        // Handle on-hold toggle clicks\n        $('#onhold').click(function() {\n            processSetting(courseId, userId, 'onhold', this.checked, root);\n            // Toggle 'Keep Alive' so the student is not automatically placed on-hold again\n            $('#keepactive').prop(\"checked\", !this.checked);\n            processSetting(courseId, userId, 'keepactive', !this.checked, root);\n        });\n\n        // Handle keep active toggle clicks\n        $('#keepactive').click(function() {\n            processSetting(courseId, userId, 'keepactive', this.checked, root);\n        });\n\n        // Handle restriction override toggle clicks\n        $('#availabilityoverride').click(function() {\n            processSetting(courseId, userId, 'availabilityoverride', this.checked, root);\n        });\n\n        // Handle show cross-course bookings toggle clicks\n        $('#xcoursebookings').click(function() {\n            processSetting(courseId, userId, 'xcoursebookings', this.checked, root);\n        });\n\n        // Handle save comment click\n        $('#save_comment_button').click(function() {\n            updateComment(courseId, userId, root);\n        });\n    };\n\n    /**\n     * Set the element state to loading.\n     *\n     * @method  startLoading\n     * @param   {object} root The container element\n     */\n    const startLoading = (root) => {\n        const loadingIconContainer = root.find(Selectors.containers.loadingIcon);\n        loadingIconContainer.removeClass('hidden');\n    };\n\n    /**\n     * Unset the element state of loading.\n     *\n     * @method  stopLoading\n     * @param   {object} root The container element\n     */\n    const stopLoading = (root) => {\n        const loadingIconContainer = root.find(Selectors.containers.loadingIcon);\n        loadingIconContainer.addClass('hidden');\n    };\n\n    return {\n        init: function(root) {\n            root = $(root);\n            registerEventListeners(root);\n        }\n    };\n});\n"],"names":["define","$","Str","Notification","Repository","Selectors","processUserPreference","preference","value","courseId","userId","element","updateUserPreferences","then","always","fetchNotifications","fail","ex","exception","prop","processSetting","key","root","startLoading","endorse","userProfile","find","userprofilewrapper","endorsername","data","endorser","endorsedate","Date","endorsedon","toDateString","endorsedatets","Math","round","getTime","endorsestr","get_string","message","html","removeClass","addClass","setEndorsement","suspend","updateSuspendedStatus","processSuspendedStatus","group","updateGroup","processGroup","stopLoading","registerEventListeners","click","this","checked","comment","val","updateProfileComment","response","result","string","text","slideDown","delay","slideUp","updateComment","containers","loadingIcon","init"],"mappings":"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"}