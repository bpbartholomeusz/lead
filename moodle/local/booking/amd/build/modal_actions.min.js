/**
 * This module handles additional logentry modal form action.
 *
 * @module     local_booking/modal_actions
 * @author     Mustafa Hajjar (mustafahajjar@gmail.com)
 * @copyright  BAVirtual.co.uk Â© 2021
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
define("local_booking/modal_actions",["jquery","core/str","core/notification","core/modal_events","core/pending","local_booking/repository","local_booking/modal_delete","local_booking/events","local_booking/selectors","local_booking/booking_actions"],(function($,Str,Notification,ModalEvents,Pending,Repository,ModalDelete,BookingSessions,BookingSelectors,BookingActions){return{registerDelete:root=>{root.on("click",BookingSelectors.actions.deleteLogentry,(function(e){const target=e.target;var logentrySource=root.find(BookingSelectors.logentryitem);((logentryId,userId,courseId,cascade)=>{var deletePromise,pendingPromise=new Pending("local_booking/booking_actions:confirmDeletion"),deleteStrings=[{key:"deletelogentry",component:"local_booking"}];deleteStrings.push({key:"confirmlogentrydelete",component:"local_booking"}),deletePromise=ModalDelete.create();var stringsPromise=Str.get_strings(deleteStrings);$.when(stringsPromise,deletePromise).then((function(strings,deleteModal){return deleteModal.setRemoveOnClose(!0),deleteModal.setTitle(strings[0]),deleteModal.setBody(strings[1]),deleteModal.show(),deleteModal.getRoot().on(ModalEvents.save,(function(){var pendingPromise=new Pending("local_booking/booking_actions:initModal:deletedlogentry");Repository.deleteLogentry(logentryId,userId,courseId,cascade).then((function(){$("body").trigger(BookingSessions.logentrydeleted,[logentryId,!1])})).then(pendingPromise.resolve).always((function(){Notification.fetchNotifications()})).catch(Notification.exception)})),deleteModal})).then((function(modal){return pendingPromise.resolve(),modal})).catch(Notification.exception)})(logentrySource.data("logentryId")||target.closest(BookingSelectors.containers.summaryForm).dataset.logentryId,logentrySource.data("userId")||target.closest(BookingSelectors.containers.summaryForm).dataset.userId,logentrySource.data("courseId")||$(BookingSelectors.logbookwrapper).data("courseid"),logentrySource.data("cascade")||target.closest(BookingSelectors.containers.summaryForm).dataset.cascade),e.preventDefault()}))},registerRedirect:function(root){root.on("click",BookingSelectors.actions.gotoFeedback,(function(e){BookingActions.gotoFeedback(root,e),e.preventDefault()}))}}}));

//# sourceMappingURL=modal_actions.min.js.map